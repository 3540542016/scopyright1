package lltw.scopyright.fisco;


import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CopyrightRegistryAndQuery extends Contract {
    public static final String[] BINARY_ARRAY = {"","5050908152602001604051809103902054905060008114151515610f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5390611748565b60405180910390fd5b60006002811115610f6957fe5b6002600083815260200190815260200160002060080160009054906101000a900460ff166002811115610f9857fe5b141515610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd190611788565b60405180910390fd5b82156110775760016002600083815260200190815260200160002060080160006101000a81548160ff0219169083600281111561101357fe5b021790555060016002600083815260200190815260200160002060050160006101000a81548160ff02191690831515021790555081600260008381526020019081526020016000206004019080519060200190611071929190611225565b506110af565b600280600083815260200190815260200160002060080160006101000a81548160ff021916908360028111156110a957fe5b02179055505b4260026000838152602001908152602001600020600701819055507fe6bfa673d9ec5f3ea6ea4327e65c6d69081b82295cfff97a8cf881791c7ec211816002600084815260200190815260200160002060080160009054906101000a900460ff168460405161112093929190611918565b60405180910390a150505050565b6101406040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160001515815260200160008152602001600081526020016000600281111561119857fe5b8152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111e657805160ff1916838001178555611214565b82800160010185558215611214579182015b828111156112135782518255916020019190600101906111f8565b5b50905061122191906112a5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061126657805160ff1916838001178555611294565b82800160010185558215611294579182015b82811115611293578251825591602001919060010190611278565b5b5090506112a191906112a5565b5090565b6112c791905b808211156112c35760008160009055506001016112ab565b5090565b90565b60006112d68235611af3565b905092915050565b600082601f83011215156112f157600080fd5b81356113046112ff82611a45565b611a18565b9150808252602083016020830185838301111561132057600080fd5b61132b838284611b2d565b50505092915050565b60006113408235611aff565b905092915050565b60006020828403121561135a57600080fd5b600082013567ffffffffffffffff81111561137457600080fd5b611380848285016112de565b91505092915050565b60008060006060848603121561139e57600080fd5b600084013567ffffffffffffffff8111156113b857600080fd5b6113c4868287016112de565b93505060206113d5868287016112ca565b925050604084013567ffffffffffffffff8111156113f257600080fd5b6113fe868287016112de565b9150509250925092565b60008060006060848603121561141d57600080fd5b600084013567ffffffffffffffff81111561143757600080fd5b611443868287016112de565b935050602084013567ffffffffffffffff81111561146057600080fd5b61146c868287016112de565b925050604084013567ffffffffffffffff81111561148957600080fd5b611495868287016112de565b9150509250925092565b6000602082840312156114b157600080fd5b60006114bf84828501611334565b91505092915050565b6114d181611a87565b82525050565b6114e081611aa7565b82525050565b6114ef81611ab3565b82525050565b6114fe81611b09565b82525050565b61150d81611b1b565b82525050565b600061151e82611a7c565b808452611532816020860160208601611b3c565b61153b81611b6f565b602085010191505092915050565b600061155482611a71565b808452611568816020860160208601611b3c565b61157181611b6f565b602085010191505092915050565b6000601b82527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006020830152604082019050919050565b6000601582527f5469746c652063616e6e6f7420626520656d70747900000000000000000000006020830152604082019050919050565b6000602882527f576f726b20776974682074686520676976656e207469746c6520646f6573206e60208301527f6f742065786973740000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602482527f4f6e6c792061756469746f722063616e20706572666f726d207468697320616360208301527f74696f6e000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f576f726b206973206e6f7420696e2070656e64696e67207374617475730000006020830152604082019050919050565b6116e781611ae9565b82525050565b600060208201905061170260008301846114c8565b92915050565b600060208201905081810360008301526117218161157f565b9050919050565b60006020820190508181036000830152611741816115b6565b9050919050565b60006020820190508181036000830152611761816115ed565b9050919050565b600060208201905081810360008301526117818161164a565b9050919050565b600060208201905081810360008301526117a1816116a7565b9050919050565b6000610140820190506117be600083018d6116de565b6117cb602083018c6114c8565b81810360408301526117dd818b611513565b905081810360608301526117f1818a611513565b905081810360808301526118058189611513565b905061181460a08301886114d7565b61182160c08301876116de565b61182e60e08301866116de565b61183c610100830185611504565b81810361012083015261184f8184611513565b90509b9a5050505050505050505050565b600061014082019050611876600083018d6116de565b611883602083018c6114c8565b8181036040830152611895818b611549565b905081810360608301526118a9818a611549565b905081810360808301526118bd8189611549565b90506118cc60a08301886114d7565b6118d960c08301876116de565b6118e660e08301866116de565b6118f4610100830185611504565b8181036101208301526119078184611549565b90509b9a5050505050505050505050565b600060608201905061192d60008301866116de565b61193a6020830185611504565b818103604083015261194c8184611513565b9050949350505050565b600060608201905061196b60008301866116de565b818103602083015261197d8185611513565b905081810360408301526119918184611513565b9050949350505050565b600060e0820190506119b0600083018a6116de565b81810360208301526119c28189611549565b90506119d160408301886114e6565b81810360608301526119e38187611549565b90506119f260808301866114f5565b6119ff60a08301856116de565b611a0c60c08301846116de565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff82111715611a3b57600080fd5b8060405250919050565b600067ffffffffffffffff821115611a5c57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000600282101515611acb57fe5b819050919050565b6000600382101515611ae157fe5b819050919050565b6000819050919050565b60008115159050919050565b6000819050919050565b6000611b1482611abd565b9050919050565b6000611b2682611ad3565b9050919050565b82818337600083830152505050565b60005b83811015611b5a578082015181840152602081019050611b3f565b83811115611b69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820167e4e1b09a339d659e2e68aa0e1cd0f45473a51fb92e181f9d00d47136729a26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","815481529060010190602001808311610f0357829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fc25780601f10610f9757610100808354040283529160200191610fc2565b820191906000526020600020905b815481529060010190602001808311610fa557829003601f168201915b505050505081526020016005820160009054906101000a900460ff1615151515815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff16600281111561101857fe5b600281111561102357fe5b8152602001600982018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001518797508696508595508090509b509b509b509b509b509b509b509b509b509b5050509193959799509193959799565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061116f57805160ff191683800117855561119d565b8280016001018555821561119d579182015b8281111561119c578251825591602001919060010190611181565b5b5090506111aa91906112a5565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111ef57805160ff191683800117855561121d565b8280016001018555821561121d579182015b8281111561121c578251825591602001919060010190611201565b5b50905061122a91906112a5565b5090565b6101406040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160001515815260200160008152602001600081526020016000600281111561129857fe5b8152602001606081525090565b6112c791905b808211156112c35760008160009055506001016112ab565b5090565b90565b60006112d68235611af3565b905092915050565b600082601f83011215156112f157600080fd5b81356113046112ff82611a45565b611a18565b9150808252602083016020830185838301111561132057600080fd5b61132b838284611b2d565b50505092915050565b60006113408235611aff565b905092915050565b60006020828403121561135a57600080fd5b600082013567ffffffffffffffff81111561137457600080fd5b611380848285016112de565b91505092915050565b60008060006060848603121561139e57600080fd5b600084013567ffffffffffffffff8111156113b857600080fd5b6113c4868287016112de565b93505060206113d5868287016112ca565b925050604084013567ffffffffffffffff8111156113f257600080fd5b6113fe868287016112de565b9150509250925092565b60008060006060848603121561141d57600080fd5b600084013567ffffffffffffffff81111561143757600080fd5b611443868287016112de565b935050602084013567ffffffffffffffff81111561146057600080fd5b61146c868287016112de565b925050604084013567ffffffffffffffff81111561148957600080fd5b611495868287016112de565b9150509250925092565b6000602082840312156114b157600080fd5b60006114bf84828501611334565b91505092915050565b6114d181611a87565b82525050565b6114e081611aa7565b82525050565b6114ef81611ab3565b82525050565b6114fe81611b09565b82525050565b61150d81611b1b565b82525050565b600061151e82611a7c565b808452611532816020860160208601611b3c565b61153b81611b6f565b602085010191505092915050565b600061155482611a71565b808452611568816020860160208601611b3c565b61157181611b6f565b602085010191505092915050565b6000601582527f5469746c652063616e6e6f7420626520656d70747900000000000000000000006020830152604082019050919050565b6000602482527f4f6e6c792061756469746f722063616e20706572666f726d207468697320616360208301527f74696f6e000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602882527f576f726b20776974682074686520676976656e207469746c6520646f6573206e60208301527f6f742065786973740000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601b82527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006020830152604082019050919050565b6000601d82527f576f726b206973206e6f7420696e2070656e64696e67207374617475730000006020830152604082019050919050565b6116e781611ae9565b82525050565b600060208201905061170260008301846114c8565b92915050565b600060208201905081810360008301526117218161157f565b9050919050565b60006020820190508181036000830152611741816115b6565b9050919050565b6000602082019050818103600083015261176181611613565b9050919050565b6000602082019050818103600083015261178181611670565b9050919050565b600060208201905081810360008301526117a1816116a7565b9050919050565b6000610140820190506117be600083018d6116de565b6117cb602083018c6114c8565b81810360408301526117dd818b611513565b905081810360608301526117f1818a611513565b905081810360808301526118058189611513565b905061181460a08301886114d7565b61182160c08301876116de565b61182e60e08301866116de565b61183c610100830185611504565b81810361012083015261184f8184611513565b90509b9a5050505050505050505050565b600061014082019050611876600083018d6116de565b611883602083018c6114c8565b8181036040830152611895818b611549565b905081810360608301526118a9818a611549565b905081810360808301526118bd8189611549565b90506118cc60a08301886114d7565b6118d960c08301876116de565b6118e660e08301866116de565b6118f4610100830185611504565b8181036101208301526119078184611549565b90509b9a5050505050505050505050565b600060608201905061192d60008301866116de565b61193a6020830185611504565b818103604083015261194c8184611513565b9050949350505050565b600060608201905061196b60008301866116de565b818103602083015261197d8185611513565b905081810360408301526119918184611513565b9050949350505050565b600060e0820190506119b0600083018a6116de565b81810360208301526119c28189611549565b90506119d160408301886114e6565b81810360608301526119e38187611549565b90506119f260808301866114f5565b6119ff60a08301856116de565b611a0c60c08301846116de565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff82111715611a3b57600080fd5b8060405250919050565b600067ffffffffffffffff821115611a5c57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000600282101515611acb57fe5b819050919050565b6000600382101515611ae157fe5b819050919050565b6000819050919050565b60008115159050919050565b6000819050919050565b6000611b1482611abd565b9050919050565b6000611b2682611ad3565b9050919050565b82818337600083830152505050565b60005b83811015611b5a578082015181840152602081019050611b3f565b83811115611b69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201f93d83b7f8082d56aa1fad3ccf4d717b6cf41e36616f6b7ca76699cee0b60ca6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"queryCopyrightByTitle\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"copyrightNumber\",\"type\":\"string\"},{\"name\":\"copyrightApplied\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"creatorUsername\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwordHash\",\"type\":\"bytes32\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"works\",\"outputs\":[{\"name\":\"workId\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"copyrightNumber\",\"type\":\"string\"},{\"name\":\"copyrightApplied\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"creatorUsername\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_approve\",\"type\":\"bool\"},{\"name\":\"_copyrightNumber\",\"type\":\"string\"}],\"name\":\"reviewWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"workId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"creatorUsername\",\"type\":\"string\"}],\"name\":\"WorkRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"workId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"copyright\",\"type\":\"string\"}],\"name\":\"WorkStatusUpdated\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_QUERYCOPYRIGHTBYTITLE = "queryCopyrightByTitle";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_AUDITOR = "auditor";

    public static final String FUNC_REGISTERWORK = "registerWork";

    public static final String FUNC_WORKS = "works";

    public static final String FUNC_REVIEWWORK = "reviewWork";

    public static final Event WORKREGISTERED_EVENT = new Event("WorkRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event WORKSTATUSUPDATED_EVENT = new Event("WorkStatusUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected CopyrightRegistryAndQuery(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple10<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger, String> queryCopyrightByTitle(String _title) throws ContractException {
        final Function function = new Function(FUNC_QUERYCOPYRIGHTBYTITLE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue(),
                (String) results.get(9).getValue());
    }

    public Tuple7<BigInteger, String, byte[], String, BigInteger, BigInteger, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, byte[], String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue());
    }

    public String auditor() throws ContractException {
        final Function function = new Function(FUNC_AUDITOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt registerWork(String _title, String _description, String _username) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerWork(String _title, String _description, String _username, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterWork(String _title, String _description, String _username) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRegisterWorkInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERWORK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public Tuple10<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger, String> works(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_WORKS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue(),
                (String) results.get(9).getValue());
    }

    public TransactionReceipt reviewWork(String _title, Boolean _approve, String _copyrightNumber) {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approve),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_copyrightNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reviewWork(String _title, Boolean _approve, String _copyrightNumber, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approve),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_copyrightNumber)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReviewWork(String _title, Boolean _approve, String _copyrightNumber) {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_title),
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approve),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_copyrightNumber)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, Boolean, String> getReviewWorkInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVIEWWORK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, Boolean, String>(

                (String) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public List<WorkRegisteredEventResponse> getWorkRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKREGISTERED_EVENT, transactionReceipt);
        ArrayList<WorkRegisteredEventResponse> responses = new ArrayList<WorkRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkRegisteredEventResponse typedResponse = new WorkRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.workId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creatorUsername = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeWorkRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeWorkRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<WorkStatusUpdatedEventResponse> getWorkStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WORKSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<WorkStatusUpdatedEventResponse> responses = new ArrayList<WorkStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WorkStatusUpdatedEventResponse typedResponse = new WorkStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.workId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.copyright = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeWorkStatusUpdatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKSTATUSUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeWorkStatusUpdatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKSTATUSUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static CopyrightRegistryAndQuery load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CopyrightRegistryAndQuery(contractAddress, client, credential);
    }

    public static CopyrightRegistryAndQuery deploy(Client client, CryptoKeyPair credential, String _auditor) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_auditor)));
        return deploy(CopyrightRegistryAndQuery.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class WorkRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public String creator;

        public BigInteger workId;

        public String title;

        public String creatorUsername;
    }

    public static class WorkStatusUpdatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger workId;

        public BigInteger status;

        public String copyright;
    }
}
